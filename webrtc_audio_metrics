audio metrics in webrtc-internals

indicators

https://code.google.com/p/chromium/codesearch#chromium/src/third_party/libjingle/source/talk/app/webrtc/statscollector.cc&sq=package:chromium&type=cs


for input
  cname:05kk6L6iZKS+vqLT
  msid:mmKFveibbcfwEKdsL8padeRgwc5PyXHdnFbZ 4154f1d8-45eb-4c4f-ab3a-73887a9c29aa
  mslabel:mmKFveibbcfwEKdsL8padeRgwc5PyXHdnFbZ
  label:4154f1d8-45eb-4c4f-ab3a-73887a9c29aa
  audioInputLevel
  bitsSentPerSecond
  packetsLost
  packetsSentPerSecond
  googEchoCancellationQualityMin
  googEchoCancellationEchoDelayMedian
  googEchoCancellationEchoDelayStdDev
  googEchoCancellationReturnLoss
  googEchoCancellationReturnLossEnhancement
  googJitterReceived
  googRtt


for output
  cname:o/i14u9pJrxRKAsu
  msid:wzTPIY6EDy a0
  mslabel:wzTPIY6EDy
  label:wzTPIY6EDya0
  audioOutputLevel
  bitsReceivedPerSecond
  packetsLost
  packetsReceivedPerSecond
  googAccelerateRate
  googCaptureStartNtpTimeMs
  googCurrentDelayMs
  googDecodingCNG
  googDecodingCTN
  googDecodingCTSG
  googDecodingNormal
  googDecodingPLC
  googDecodingPLCCNG
  googExpandRate
  googJitterBufferMs
  googJitterReceived
  googPreemptiveExpandRate
  googPreferredJitterBufferMs
  googSecondaryDecodedRate
  googSpeechExpandRate


Code go through

in common_types.h
// Statistics for an RTCP channel
struct RtcpStatistics {
  RtcpStatistics()
    : fraction_lost(0),
      cumulative_lost(0),
      extended_max_sequence_number(0),
      jitter(0) {}

  uint8_t fraction_lost;
  uint32_t cumulative_lost;
  uint32_t extended_max_sequence_number;
  uint32_t jitter;
};

// Statistics for RTCP packet types.
struct RtcpPacketTypeCounter {

// Rate statistics for a stream.
struct BitrateStatistics {

struct NetworkStatistics           // NETEQ statistics

// Statistics for calls to AudioCodingModule::PlayoutData10Ms().
struct AudioDecodingCallStats {

StatVal;

LevelStatistics

EchoStatistics

struct RtpPacketCounter

// Data usage statistics for a (rtp) stream.
struct StreamDataCounters
packetsLost


class RtcpStatisticsCallback {
-->
  RegisterRtcpStatisticsCallback(
  called by in channel.cc
  statistics_proxy_.reset(new StatisticsProxy(_rtpRtcpModule->SSRC()));
    rtp_receive_statistics_->RegisterRtcpStatisticsCallback(
        statistics_proxy_.get());

class RtcpPacketTypeCounterObserver {

// Callback, used to notify an observer whenever new rates have been estimated.
class BitrateStatisticsObserver {

// Callback, called whenever byte/packet counts have been updated.
class StreamDataCountersCallback
-->
  RegisterSendChannelRtpStatisticsCallback

For using from peerconnection layer
statscollector.cd
  StatsCollector::UpdateStats(PeerConnectionInterface::StatsOutputLevel level)
    ExtractSessionInfo();
    ExtractVoiceInfo();
    ExtractVideoInfo(level);
    ExtractDataInfo();
    UpdateTrackReports();

in channel.cc
  // Extend the default RTCP statistics struct with max_jitter, defined as the
  // maximum jitter value seen in an RTCP report block.
  struct ChannelStatistics : public RtcpStatistics {

  // Statistics callback, called at each generation of a new RTCP report block.
  class StatisticsProxy : public RtcpStatisticsCallback {

  class VoERtcpObserver : public RtcpBandwidthObserver {




RTP/RTCP related status
Some backtrace

for RTP stats in ReceiveStatisticsImpl::IncomingPacket

#0  webrtc::ReceiveStatisticsImpl::DataCountersUpdated (this=0x3bca7e0, stats=..., ssrc=1814100175)
    at /home/luq/Dev2/webrtc-woogeen-2/third_party/webrtc/src/webrtc/modules/rtp_rtcp/source/receive_statistics_impl.cc:530
#1  0x00007fb93426312d in webrtc::StreamStatisticianImpl::NotifyRtpCallback (this=0x3e4a000)
    at /home/luq/Dev2/webrtc-woogeen-2/third_party/webrtc/src/webrtc/modules/rtp_rtcp/source/receive_statistics_impl.cc:181
#2  0x00007fb934262bf7 in webrtc::StreamStatisticianImpl::IncomingPacket (this=0x3e4a000, header=..., packet_length=101, retransmitted=false)
    at /home/luq/Dev2/webrtc-woogeen-2/third_party/webrtc/src/webrtc/modules/rtp_rtcp/source/receive_statistics_impl.cc:74
#3  0x00007fb934263ee0 in webrtc::ReceiveStatisticsImpl::IncomingPacket (this=0x3bca7e0, header=..., packet_length=101, retransmitted=false)
    at /home/luq/Dev2/webrtc-woogeen-2/third_party/webrtc/src/webrtc/modules/rtp_rtcp/source/receive_statistics_impl.cc:434
#4  0x00007fb934241090 in woogeen_base::ProtectedRTPReceiver::deliverAudioData (this=0x87db700, buf=0x87e83e1 "\220x&hghe*l \370", <incomplete sequence \336>, len=101)
    at /home/luq/Dev2/webrtc-woogeen-2/source/core/woogeen_base/ProtectedRTPReceiver.cpp:148
#5  0x00007fb9341bc1bf in mcu::WebRTCGateway::deliverAudioData (this=0x3e43180, buf=0x87e83e1 "\220x&hghe*l \370", <incomplete sequence \336>, len=101)
    at /home/luq/Dev2/webrtc-woogeen-2/source/core/mcu/WebRTCGateway.cpp:50
#6  0x00007fb933c5bd21 in erizo::WebRtcConnection::onTransportData (this=0x3d1d200, buf=0x87e83e1 "\220x&hghe*l \370", <incomplete sequence \336>, len=101, transport=0x87e7008)
    at /home/luq/Dev2/webrtc-woogeen-2/source/core/erizo/src/erizo/WebRtcConnection.cpp:427
#7  0x00007fb933c3a917 in erizo::DtlsTransport::onNiceData (this=0x87e7000, component_id=1, data=0x3df0404 "\220o&hghe*l \370", <incomplete sequence \336>, len=111, nice=0x0)
    at /home/luq/Dev2/webrtc-woogeen-2/source/core/erizo/src/erizo/DtlsTransport.cpp:165
#8  0x00007fb933c3c84f in erizo::DtlsTransport::getNiceDataLoop (this=0x87e7000) at /home/luq/Dev2/webrtc-woogeen-2/source/core/erizo/src/erizo/DtlsTransport.cpp:315
#9  0x00007fb933c420f9 in boost::_mfi::mf0<void, erizo::DtlsTransport>::operator() (this=0x3bcf478, p=0x87e7000) at /usr/include/boost/bind/mem_fn_template.hpp:49
#10 0x00007fb933c4200a in boost::_bi::list1<boost::_bi::value<erizo::DtlsTransport*> >::operator()<boost::_mfi::mf0<void, erizo::DtlsTransport>, boost::_bi::list0> (this=0x3bcf488, f=..., a=...)
    at /usr/include/boost/bind/bind.hpp:253


for RTCP stats in StreamStatisticianImpl::GetStatistics 

#0  webrtc::StreamStatisticianImpl::CalculateRtcpStatistics (this=0x3e4a2c0) at /home/luq/Dev2/webrtc-woogeen-2/third_party/webrtc/src/webrtc/modules/rtp_rtcp/source/receive_statistics_impl.cc:239
#1  0x00007fb934263349 in webrtc::StreamStatisticianImpl::GetStatistics (this=0x3e4a2c0, statistics=0x7fb9297a7cb0, reset=true)
    at /home/luq/Dev2/webrtc-woogeen-2/third_party/webrtc/src/webrtc/modules/rtp_rtcp/source/receive_statistics_impl.cc:230
#2  0x00007fb934241eca in woogeen_base::ProtectedRTPReceiver::generateReceiverReport (this=0x87db200, buf=0x7fb9297af330 "\200", <incomplete sequence \311>, maxLength=1472)
    at /home/luq/Dev2/webrtc-woogeen-2/source/core/woogeen_base/ProtectedRTPReceiver.cpp:298
#3  0x00007fb9342416e1 in woogeen_base::ProtectedRTPReceiver::generateRTCPFeedback (this=0x87db200, buffer=0x7fb9297af330 "\200", <incomplete sequence \311>, bufferSize=1472, nack=false)
    at /home/luq/Dev2/webrtc-woogeen-2/source/core/woogeen_base/ProtectedRTPReceiver.cpp:204
#4  0x00007fb9341beb93 in mcu::WebRTCGateway::onTimeout (this=0x3e43180) at /home/luq/Dev2/webrtc-woogeen-2/source/core/mcu/WebRTCGateway.cpp:371
#5  0x00007fb9341c3548 in woogeen_base::JobTimer::handleJob (this=0x3e48f40) at /home/luq/Dev2/webrtc-woogeen-2/source/core/woogeen_base/JobTimer.h:89
#6  0x00007fb9341c34b1 in woogeen_base::JobTimer::onTimeout (this=0x3e48f40, ec=...) at /home/luq/Dev2/webrtc-woogeen-2/source/core/woogeen_base/JobTimer.h:80
#7  0x00007fb9341cfe64 in boost::_mfi::mf1<void, woogeen_base::JobTimer, boost::system::error_code const&>::operator() (this=0x7fb9297afb30, p=0x3e48f40, a1=...)
    at /usr/include/boost/bind/mem_fn_template.hpp:165


For audioInputLevel in client(chrome), 
only used by chrome, not see any report in native apprtcdemo
TBD, need to track the volume after mixed which is send to sub in our MCU and compare the decoded audio level to the sender's audioInputLevel.
     For MCU, 
       outputlevel for each participants
       outputlevel for mixed audio

code path
in webrtc_local_audio_track.h .cc

// Used to calculate the signal level that shows in the UI.
// Accessed on only the audio thread.
scoped_ptr<MediaStreamAudioLevelCalculator> level_calculator_;

it is updated by WebRtcLocalAudioTrack::Capture

and it is used by statscollector.cc
------
void StatsCollector::UpdateReportFromAudioTrack(AudioTrackInterface* track,
                                                StatsReport* report) {
  RTC_DCHECK(pc_->session()->signaling_thread()->IsCurrent());
  RTC_DCHECK(track != NULL);

  int signal_level = 0;
  if (!track->GetSignalLevel(&signal_level))
    signal_level = -1;

-->
in media_stream_audio_level_calculator.cc
float MediaStreamAudioLevelCalculator::Calculate(

------
since audio capture module in chrome is re-implemented not related to any audio_device module in webrtc stack.

So, !!! NOTE !!!, audioInputLevel is calculated in chrome audio capture module not the audio_device module in legacy webrtc stack.


For audioOutputLevel in client(chrome),
  which should be compared with outoutlevel of Mixed audio sending from MCU
  For MCU, TBD recording the outputlevel of mixed audio


For packetsLost in client(chrome)
check the calculation mechanism, based RTCP SR


For googEchoCancellationQualityMin
  googEchoCancellationEchoDelayMedian
  googEchoCancellationEchoDelayStdDev
  googEchoCancellationReturnLoss
  googEchoCancellationReturnLossEnhancement
,
those input audio processing related indicators not involved by MCU, just skip them


For 
  googJitterReceived, googRtt in Sender


code path
in statscollector.cc, see
void StatsCollector::ExtractVoiceInfo() {
  if (!pc_->session()->voice_channel()->GetStats(&voice_info)) {

-->
webrtcvoiceengine.cc
bool WebRtcVoiceMediaChannel::GetStats(VoiceMediaInfo* info) {audio_level
-->
audio_send_stream.cc
webrtc::AudioSendStream::Stats AudioSendStream::GetStats()
Note, this function is core method for generated audio related stats

-------
 RTC_DCHECK(thread_checker_.CalledOnValidThread());
  webrtc::AudioSendStream::Stats stats;
  stats.local_ssrc = config_.rtp.ssrc;
  internal::AudioState* audio_state =
      static_cast<internal::AudioState*>(audio_state_.get());
  VoiceEngine* voice_engine = audio_state->voice_engine();
  ScopedVoEInterface<VoEAudioProcessing> processing(voice_engine);
  ScopedVoEInterface<VoECodec> codec(voice_engine);
  ScopedVoEInterface<VoERTP_RTCP> rtp(voice_engine);
  ScopedVoEInterface<VoEVolumeControl> volume(voice_engine);
  unsigned int ssrc = 0;
  webrtc::CallStatistics call_stats = {0};
  if (rtp->GetLocalSSRC(config_.voe_channel_id, ssrc) == -1 ||
      rtp->GetRTCPStatistics(config_.voe_channel_id, call_stats) == -1) {
    return stats;
  }

  stats.bytes_sent = call_stats.bytesSent;
  stats.packets_sent = call_stats.packetsSent;

  webrtc::CodecInst codec_inst = {0};
  if (codec->GetSendCodec(config_.voe_channel_id, codec_inst) != -1) {
    RTC_DCHECK_NE(codec_inst.pltype, -1);
    stats.codec_name = codec_inst.plname;

    // Get data from the last remote RTCP report.
    std::vector<webrtc::ReportBlock> blocks;
    if (rtp->GetRemoteRTCPReportBlocks(config_.voe_channel_id, &blocks) != -1) {
      for (const webrtc::ReportBlock& block : blocks) {
        // Lookup report for send ssrc only.
        if (block.source_SSRC == stats.local_ssrc) {
          stats.packets_lost = block.cumulative_num_packets_lost;
          stats.fraction_lost = Q8ToFloat(block.fraction_lost);
          stats.ext_seqnum = block.extended_highest_sequence_number;
          // Convert samples to milliseconds.
          if (codec_inst.plfreq / 1000 > 0) {
            stats.jitter_ms =
                block.interarrival_jitter / (codec_inst.plfreq / 1000);
          }
          break;
        }
      }
    }
  }

  // RTT isn't known until a RTCP report is received. Until then, VoiceEngine
  // returns 0 to indicate an error value.
  if (call_stats.rttMs > 0) {
    stats.rtt_ms = call_stats.rttMs;
  }

  // Local speech level. --> for audioOutputLevel
  {
    unsigned int level = 0;
    if (volume->GetSpeechInputLevelFullRange(level) != -1) {
      stats.audio_level = static_cast<int32_t>(level);
    }
  }

  // TODO(ajm): Re-enable this metric once we have a reliable implementation.
  stats.aec_quality_min = -1;

  bool echo_metrics_on = false;
  if (processing->GetEcMetricsStatus(echo_metrics_on) != -1 &&
      echo_metrics_on) {
    // These can also be negative, but in practice -1 is only used to signal
    // insufficient data, since the resolution is limited to multiples of 4 ms.
    int median = -1;
    int std = -1;
    float dummy = 0.0f;
    if (processing->GetEcDelayMetrics(median, std, dummy) != -1) {
      stats.echo_delay_median_ms = median;
      stats.echo_delay_std_ms = std;
    }

    // These can take on valid negative values, so use the lowest possible level
    // as default rather than -1.
    int erl = -100;
    int erle = -100;
    int dummy1 = 0;
    int dummy2 = 0;
    if (processing->GetEchoMetrics(erl, erle, dummy1, dummy2) != -1) {
      stats.echo_return_loss = erl;
      stats.echo_return_loss_enhancement = erle;
    }
  }

  stats.typing_noise_detected = audio_state->typing_noise_detected();

  return stats;
}googAccelerateRate
------



For in Receiver, TBD, check wheter there are other important information not exposed to webrtc-internals??
   see RTP,RTCP callback
   audioOutputLevel, bitsReceivedPerSecond, packetsLost, packetsReceivedPerSecond

see comments in below source code
  googAccelerateRate
  googCaptureStartNtpTimeMs
  googCurrentDelayMs
  googDecodingCNG
  googDecodingCTN
  googDecodingCTSG
  googDecodingNormal
  googDecodingPLC
  googDecodingPLCCNG
  googExpandRate
  googJitterBufferMs
  googJitterReceived
  googPreemptiveExpandRate
  googPreferredJitterBufferMs
  googSecondaryDecodedRate
  googSpeechExpandRate

-----
Mapping rule

 ExtractCommonReceiveProperties(info, report);
  const FloatForAdd floats[] = {
    { StatsReport::kStatsValueNameExpandRate, info.expand_rate },
    { StatsReport::kStatsValueNameSecondaryDecodedRate,
      info.secondary_decoded_rate },
    { StatsReport::kStatsValueNameSpeechExpandRate, info.speech_expand_rate },
    { StatsReport::kStatsValueNameAccelerateRate, info.accelerate_rate },
    { StatsReport::kStatsValueNamePreemptiveExpandRate,
      info.preemptive_expand_rate },
  };

  const IntForAdd ints[] = {
    { StatsReport::kStatsValueNameAudioOutputLevel, info.audio_level },
    { StatsReport::kStatsValueNameCurrentDelayMs, info.delay_estimate_ms },
    { StatsReport::kStatsValueNameDecodingCNG, info.decoding_cng },
    { StatsReport::kStatsValueNameDecodingCTN, info.decoding_calls_to_neteq },
    { StatsReport::kStatsValueNameDecodingCTSG,
      info.decoding_calls_to_silence_generator },
    { StatsReport::kStatsValueNameDecodingNormal, info.decoding_normal },
    { StatsReport::kStatsValueNameDecodingPLC, info.decoding_plc },
    { StatsReport::kStatsValueNameDecodingPLCCNG, info.decoding_plc_cng },
    { StatsReport::kStatsValueNameJitterBufferMs, info.jitter_buffer_ms },
    { StatsReport::kStatsValueNameJitterReceived, info.jitter_ms },
    { StatsReport::kStatsValueNamePacketsLost, info.packets_lost },
    { StatsReport::kStatsValueNamePacketsReceived, info.packets_rcvd },
    { StatsReport::kStatsValueNamePreferredJitterBufferMs,
      info.jitter_buffer_preferred_ms },
  };

-----

Code path:

in statscollector.cc, see
void StatsCollector::ExtractVoiceInfo() {
  if (!pc_->session()->voice_channel()->GetStats(&voice_info)) {

-->
webrtcvoiceengine.cc
bool WebRtcVoiceMediaChannel::GetStats(VoiceMediaInfo* info) {audio_level
-->
audio_receive_stream.cc
-----
webrtc::AudioReceiveStream::Stats AudioReceiveStream::GetStats() const {
  RTC_DCHECK(thread_checker_.CalledOnValidThread());
  webrtc::AudioReceiveStream::Stats stats;
  stats.remote_ssrc = config_.rtp.remote_ssrc;
  internal::AudioState* audio_state =
      static_cast<internal::AudioState*>(audio_state_.get());
  VoiceEngine* voice_engine = audio_state->voice_engine();
  ScopedVoEInterface<VoECodec> codec(voice_engine);
  ScopedVoEInterface<VoENetEqStats> neteq(voice_engine);
  ScopedVoEInterface<VoERTP_RTCP> rtp(voice_engine);
  ScopedVoEInterface<VoEVideoSync> sync(voice_engine);
  ScopedVoEInterface<VoEVolumeControl> volume(voice_engine);
  unsigned int ssrc = 0;
  webrtc::CallStatistics call_stats = {0};
  webrtc::CodecInst codec_inst = {0};
  // Only collect stats if we have seen some traffic with the SSRC.
  if (rtp->GetRemoteSSRC(config_.voe_channel_id, ssrc) == -1 ||
      rtp->GetRTCPStatistics(config_.voe_channel_id, call_stats) == -1 ||
      codec->GetRecCodec(config_.voe_channel_id, codec_inst) == -1) {
    return stats;
  }

  stats.bytes_rcvd = call_stats.bytesReceived;
  stats.packets_rcvd = call_stats.packetsReceived;
  stats.packets_lost = call_stats.cumulativeLost;
  stats.fraction_lost = Q8ToFloat(call_stats.fractionLost); --> not exposed to webrtc_internal
  if (codec_inst.pltype != -1) {
    stats.codec_name = codec_inst.plname;
  }
  stats.ext_seqnum = call_stats.extendedMax; --> note exposed to webrtc_internal
  if (codec_inst.plfreq / 1000 > 0) {
    stats.jitter_ms = call_stats.jitterSamples / (codec_inst.plfreq / 1000); --> googJitterReceived
  }
  {
    int jitter_buffer_delay_ms = 0;
    int playout_buffer_delay_ms = 0;
    sync->GetDelayEstimate(config_.voe_channel_id, &jitter_buffer_delay_ms,
                           &playout_buffer_delay_ms);
    stats.delay_estimate_ms = jitter_buffer_delay_ms + playout_buffer_delay_ms; --> googCurrentDelayMs
  }
  {
    unsigned int level = 0;
    if (volume->GetSpeechOutputLevelFullRange(config_.voe_channel_id, level) !=
        -1) {
      stats.audio_level = static_cast<int32_t>(level); --> audioOutputLevel
    }
  }

  webrtc::NetworkStatistics ns = {0};
  if (neteq->GetNetworkStatistics(config_.voe_channel_id, ns) != -1) {
    // Get jitter buffer and total delay (alg + jitter + playout) stats.
    stats.jitter_buffer_ms = ns.currentBufferSize; --> googJitterBufferMs
    stats.jitter_buffer_preferred_ms = ns.preferredBufferSize; --> googPreferredJitterBufferMs
    stats.expand_rate = Q14ToFloat(ns.currentExpandRate); --> googExpandRate
    stats.speech_expand_rate = Q14ToFloat(ns.currentSpeechExpandRate); --> googSpeechExpandRate
    stats.secondary_decoded_rate = Q14ToFloat(ns.currentSecondaryDecodedRate); --> googSecondaryDecodedRate
    stats.accelerate_rate = Q14ToFloat(ns.currentAccelerateRate); --> googAccelerateRate
    stats.preemptive_expand_rate = Q14ToFloat(ns.currentPreemptiveRate); --> googPreemptiveExpandRate
  }

  webrtc::AudioDecodingCallStats ds;
  if (neteq->GetDecodingCallStatistics(config_.voe_channel_id, &ds) != -1) {
    stats.decoding_calls_to_silence_generator = ds.calls_to_silence_generator;  --> googDecodingCTSG
    stats.decoding_calls_to_neteq = ds.calls_to_neteq; --> googDecodingCTN
    stats.decoding_normal = ds.decoded_normal; --> googDecodingNormal
    stats.decoding_plc = ds.decoded_plc;  --> googDecodingPLC
    stats.decoding_cng = ds.decoded_cng;  --> googDecodingCNG
    stats.decoding_plc_cng = ds.decoded_plc_cng; --> googDecodingPLCCNG
  }

  stats.capture_start_ntp_time_ms = call_stats.capture_start_ntp_time_ms_;  --> googCaptureStartNtpTimeMs

  return stats;
}

-----


